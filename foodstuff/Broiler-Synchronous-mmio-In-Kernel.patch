diff -uprN old/arch/x86/kvm/Broiler.c new/arch/x86/kvm/Broiler.c
--- old/arch/x86/kvm/Broiler.c	1970-01-01 08:00:00.000000000 +0800
+++ new/arch/x86/kvm/Broiler.c	2022-10-03 11:08:49.871161811 +0800
@@ -0,0 +1,115 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Broiler Synchronous MMIO on In-Kernel Device
+ *
+ * Copyright (c) BuddyZhang1 <buddy.zhang@aliyun.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+#include <linux/kernel.h>
+#include <linux/slab.h>
+#include <linux/kvm_host.h>
+#include <kvm/iodev.h>
+
+#define BROILER_MMIO_BASE	0xD0000020
+#define BROILER_MMIO_LEN	0x10
+#define SLOT_NUM_REG		0x00
+#define SLOT_SEL_REG		0x04
+#define MIN_FREQ_REG		0x08
+#define MAX_FREQ_REG		0x0C
+
+struct kvm_broiler_device {
+	struct kvm_io_device mmio;
+	int slot_num;
+	int slot_sel;
+	int min_freq;
+	int max_freq;
+};
+
+static int broiler_synchronous_mmio_read(struct kvm_vcpu *vcpu,
+	struct kvm_io_device *dev, gpa_t addr, int len, void *val)
+{
+	struct kvm_broiler_device *bdev =
+			container_of(dev, struct kvm_broiler_device, mmio);
+	unsigned int *data = (unsigned int *)val;
+
+	switch (addr - BROILER_MMIO_BASE) {
+	case SLOT_NUM_REG:
+		*data = bdev->slot_num;
+		break;
+	case SLOT_SEL_REG:
+		*data = bdev->slot_sel;
+		break;
+	case MIN_FREQ_REG:
+		*data = bdev->min_freq;
+		break;
+	case MAX_FREQ_REG:
+		*data = bdev->max_freq;
+		break;
+	default:
+		return -EOPNOTSUPP;
+	}
+
+	return 0;
+}
+
+static int broiler_synchronous_mmio_write(struct kvm_vcpu *vcpu,
+	struct kvm_io_device *dev, gpa_t addr, int len, const void *val)
+{
+	struct kvm_broiler_device *bdev =
+			container_of(dev, struct kvm_broiler_device, mmio);
+	unsigned int data = *(unsigned int *)val;
+
+	switch (addr - BROILER_MMIO_BASE) {
+	case SLOT_NUM_REG:
+		bdev->slot_num = data;	
+		break;
+	case SLOT_SEL_REG:
+		bdev->slot_sel = data;
+		break;
+	case MIN_FREQ_REG:
+		bdev->min_freq = data;
+		break;
+	case MAX_FREQ_REG:
+		bdev->max_freq = data;
+		break;
+	default:
+		return -EOPNOTSUPP;
+	}
+
+	return 0;
+}
+
+static const struct kvm_io_device_ops broiler_synchronous_mmio_ops = {
+	.read	= broiler_synchronous_mmio_read,
+	.write	= broiler_synchronous_mmio_write,
+};
+
+int kvm_broiler_synchronous_mmio_device(struct kvm *kvm)
+{
+	struct kvm_broiler_device *dev;
+	int ret;
+
+	dev = kzalloc(sizeof(struct kvm_broiler_device), GFP_KERNEL_ACCOUNT);
+	if (!dev)
+		return -ENOMEM;
+	dev->slot_num = 0x20;
+	dev->slot_sel = 0x00;
+	dev->min_freq = 0x10;
+	dev->max_freq = 0x40;
+
+	kvm_iodevice_init(&dev->mmio, &broiler_synchronous_mmio_ops);
+
+	ret = kvm_io_bus_register_dev(kvm, KVM_MMIO_BUS,
+			BROILER_MMIO_BASE, BROILER_MMIO_LEN, &dev->mmio);
+	if (ret < 0)
+		goto err_bus;
+
+	return 0;
+
+err_bus:
+	kfree(dev);
+	return ret;
+}
diff -uprN old/arch/x86/kvm/Broiler.h new/arch/x86/kvm/Broiler.h
--- old/arch/x86/kvm/Broiler.h	1970-01-01 08:00:00.000000000 +0800
+++ new/arch/x86/kvm/Broiler.h	2022-10-03 11:08:39.083402507 +0800
@@ -0,0 +1,6 @@
+#ifndef _BROILER_SYNC_PIO_H
+#define _BROILER_SYNC_PIO_H
+
+extern int kvm_broiler_synchronous_mmio_device(struct kvm *kvm);
+
+#endif
diff -uprN old/arch/x86/kvm/Makefile new/arch/x86/kvm/Makefile
--- old/arch/x86/kvm/Makefile	2020-12-14 06:41:30.000000000 +0800
+++ new/arch/x86/kvm/Makefile	2022-10-03 11:09:22.662444478 +0800
@@ -16,7 +16,7 @@ kvm-$(CONFIG_KVM_ASYNC_PF)	+= $(KVM)/asy
 kvm-y			+= x86.o emulate.o i8259.o irq.o lapic.o \
 			   i8254.o ioapic.o irq_comm.o cpuid.o pmu.o mtrr.o \
 			   hyperv.o debugfs.o mmu/mmu.o mmu/page_track.o \
-			   mmu/spte.o mmu/tdp_iter.o mmu/tdp_mmu.o
+			   mmu/spte.o mmu/tdp_iter.o mmu/tdp_mmu.o Broiler.o
 
 kvm-intel-y		+= vmx/vmx.o vmx/vmenter.o vmx/pmu_intel.o vmx/vmcs12.o \
 			   vmx/evmcs.o vmx/nested.o vmx/posted_intr.o
diff -uprN old/arch/x86/kvm/x86.c new/arch/x86/kvm/x86.c
--- old/arch/x86/kvm/x86.c	2020-12-14 06:41:30.000000000 +0800
+++ new/arch/x86/kvm/x86.c	2022-10-03 10:42:34.535588710 +0800
@@ -29,6 +29,7 @@
 #include "pmu.h"
 #include "hyperv.h"
 #include "lapic.h"
+#include "Broiler.h"
 
 #include <linux/clocksource.h>
 #include <linux/interrupt.h>
@@ -3739,6 +3740,7 @@ int kvm_vm_ioctl_check_extension(struct
 	case KVM_CAP_X86_USER_SPACE_MSR:
 	case KVM_CAP_X86_MSR_FILTER:
 	case KVM_CAP_ENFORCE_PV_FEATURE_CPUID:
+	case KVM_CAP_BROILER_SYNC_MMIO_DEV:
 		r = 1;
 		break;
 	case KVM_CAP_SYNC_REGS:
@@ -5425,6 +5427,13 @@ set_identity_unlock:
 	case KVM_GET_NR_MMU_PAGES:
 		r = kvm_vm_ioctl_get_nr_mmu_pages(kvm);
 		break;
+	case KVM_CREATE_SYNC_MMIO_DEV:
+		mutex_lock(&kvm->lock);
+		r = -EEXIST;
+
+		r = kvm_broiler_synchronous_mmio_device(kvm);
+		mutex_unlock(&kvm->lock);
+		break;
 	case KVM_CREATE_IRQCHIP: {
 		mutex_lock(&kvm->lock);
 
diff -uprN old/include/uapi/linux/kvm.h new/include/uapi/linux/kvm.h
--- old/include/uapi/linux/kvm.h	2020-12-14 06:41:30.000000000 +0800
+++ new/include/uapi/linux/kvm.h	2022-10-03 11:07:51.968482741 +0800
@@ -1053,6 +1053,7 @@ struct kvm_ppc_resize_hpt {
 #define KVM_CAP_X86_USER_SPACE_MSR 188
 #define KVM_CAP_X86_MSR_FILTER 189
 #define KVM_CAP_ENFORCE_PV_FEATURE_CPUID 190
+#define KVM_CAP_BROILER_SYNC_MMIO_DEV 251
 
 #ifdef KVM_CAP_IRQ_ROUTING
 
@@ -1402,6 +1403,9 @@ struct kvm_s390_ucas_mapping {
 #define KVM_GET_DEVICE_ATTR	  _IOW(KVMIO,  0xe2, struct kvm_device_attr)
 #define KVM_HAS_DEVICE_ATTR	  _IOW(KVMIO,  0xe3, struct kvm_device_attr)
 
+/* Broiler Synchronous MMIO Device */
+#define KVM_CREATE_SYNC_MMIO_DEV	_IO(KVMIO, 0xef)
+
 /*
  * ioctls for vcpu fds
  */
